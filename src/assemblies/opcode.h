#pragma once

#include <string>

namespace stereo {
    namespace assemblies {

        enum class FlowControl
        {
            BRANCH,
            BREAK,
            CALL,
            COND_BRANCH,
            META,
            NEXT,
            PHI,
            RETURN,
            THROW,
        };

        enum class OpCodeType
        {
            IAnnotation,
            IMacro,
            IInternal,
            IObjModel,
            IPrefix,
            IPrimitive,
        };

        enum class OperandType
        {
            InlineBrTarget,
            InlineField,
            InlineI,
            InlineI8,
            InlineMethod,
            InlineNone,
            InlinePhi,
            InlineR,
            InlineSig,
            InlineString,
            InlineSwitch,
            InlineTok,
            InlineType,
            InlineVar,
            InlineArg,
            ShortInlineBrTarget,
            ShortInlineI,
            ShortInlineR,
            ShortInlineVar,
            ShortInlineArg,
        };

        enum class StackBehaviour
        {
            Pop0,
            Pop1,
            Pop1_pop1,
            Popi,
            Popi_pop1,
            Popi_popi,
            Popi_popi8,
            Popi_popi_popi,
            Popi_popr4,
            Popi_popr8,
            Popref,
            Popref_pop1,
            Popref_popi,
            Popref_popi_popi,
            Popref_popi_popi8,
            Popref_popi_popr4,
            Popref_popi_popr8,
            Popref_popi_popref,
            Popref_popi_pop1,
            PopAll,
            Push0,
            Push1,
            Push1_push1,
            Pushi,
            Pushi8,
            Pushr4,
            Pushr8,
            Pushref,
            Varpop,
            Varpush,
        };

        enum class Code
        {
            NOP,
            BREAK,
            LDARG_0,
            LDARG_1,
            LDARG_2,
            LDARG_3,
            LDLOC_0,
            LDLOC_1,
            LDLOC_2,
            LDLOC_3,
            STLOC_0,
            STLOC_1,
            STLOC_2,
            STLOC_3,
            LDARG_S,
            LDARGA_S,
            STARG_S,
            LDLOC_S,
            LDLOCA_S,
            STLOC_S,
            LDNULL,
            LDC_I4_M1,
            LDC_I4_0,
            LDC_I4_1,
            LDC_I4_2,
            LDC_I4_3,
            LDC_I4_4,
            LDC_I4_5,
            LDC_I4_6,
            LDC_I4_7,
            LDC_I4_8,
            LDC_I4_S,
            LDC_I4,
            LDC_I8,
            LDC_R4,
            LDC_R8,
            UNUSED49,
            DUP,
            POP,
            JMP,
            CALL,
            CALLI,
            RET,
            BR_S,
            BRFALSE_S,
            BRTRUE_S,
            BEQ_S,
            BGE_S,
            BGT_S,
            BLE_S,
            BLT_S,
            BNE_UN_S,
            BGE_UN_S,
            BGT_UN_S,
            BLE_UN_S,
            BLT_UN_S,
            BR,
            BRFALSE,
            BRTRUE,
            BEQ,
            BGE,
            BGT,
            BLE,
            BLT,
            BNE_UN,
            BGE_UN,
            BGT_UN,
            BLE_UN,
            BLT_UN,
            SWITCH,
            LDIND_I1,
            LDIND_U1,
            LDIND_I2,
            LDIND_U2,
            LDIND_I4,
            LDIND_U4,
            LDIND_I8,
            LDIND_I,
            LDIND_R4,
            LDIND_R8,
            LDIND_REF,
            STIND_REF,
            STIND_I1,
            STIND_I2,
            STIND_I4,
            STIND_I8,
            STIND_R4,
            STIND_R8,
            ADD,
            SUB,
            MUL,
            DIV,
            DIV_UN,
            REM,
            REM_UN,
            AND,
            OR,
            XOR,
            SHL,
            SHR,
            SHR_UN,
            NEG,
            NOT,
            CONV_I1,
            CONV_I2,
            CONV_I4,
            CONV_I8,
            CONV_R4,
            CONV_R8,
            CONV_U4,
            CONV_U8,
            CALLVIRT,
            CPOBJ,
            LDOBJ,
            LDSTR,
            NEWOBJ,
            CASTCLASS,
            ISINST,
            CONV_R_UN,
            UNUSED58,
            UNUSED1,
            UNBOX,
            THROW,
            LDFLD,
            LDFLDA,
            STFLD,
            LDSFLD,
            LDSFLDA,
            STSFLD,
            STOBJ,
            CONV_OVF_I1_UN,
            CONV_OVF_I2_UN,
            CONV_OVF_I4_UN,
            CONV_OVF_I8_UN,
            CONV_OVF_U1_UN,
            CONV_OVF_U2_UN,
            CONV_OVF_U4_UN,
            CONV_OVF_U8_UN,
            CONV_OVF_I_UN,
            CONV_OVF_U_UN,
            BOX,
            NEWARR,
            LDLEN,
            LDELEMA,
            LDELEM_I1,
            LDELEM_U1,
            LDELEM_I2,
            LDELEM_U2,
            LDELEM_I4,
            LDELEM_U4,
            LDELEM_I8,
            LDELEM_I,
            LDELEM_R4,
            LDELEM_R8,
            LDELEM_REF,
            STELEM_I,
            STELEM_I1,
            STELEM_I2,
            STELEM_I4,
            STELEM_I8,
            STELEM_R4,
            STELEM_R8,
            STELEM_REF,
            LDELEM,
            STELEM,
            UNBOX_ANY,
            UNUSED5,
            UNUSED6,
            UNUSED7,
            UNUSED8,
            UNUSED9,
            UNUSED10,
            UNUSED11,
            UNUSED12,
            UNUSED13,
            UNUSED14,
            UNUSED15,
            UNUSED16,
            UNUSED17,
            CONV_OVF_I1,
            CONV_OVF_U1,
            CONV_OVF_I2,
            CONV_OVF_U2,
            CONV_OVF_I4,
            CONV_OVF_U4,
            CONV_OVF_I8,
            CONV_OVF_U8,
            UNUSED50,
            UNUSED18,
            UNUSED19,
            UNUSED20,
            UNUSED21,
            UNUSED22,
            UNUSED23,
            REFANYVAL,
            CKFINITE,
            UNUSED24,
            UNUSED25,
            MKREFANY,
            UNUSED59,
            UNUSED60,
            UNUSED61,
            UNUSED62,
            UNUSED63,
            UNUSED64,
            UNUSED65,
            UNUSED66,
            UNUSED67,
            LDTOKEN,
            CONV_U2,
            CONV_U1,
            CONV_I,
            CONV_OVF_I,
            CONV_OVF_U,
            ADD_OVF,
            ADD_OVF_UN,
            MUL_OVF,
            MUL_OVF_UN,
            SUB_OVF,
            SUB_OVF_UN,
            ENDFINALLY,
            LEAVE,
            LEAVE_S,
            STIND_I,
            CONV_U,
            UNUSED26,
            UNUSED27,
            UNUSED28,
            UNUSED29,
            UNUSED30,
            UNUSED31,
            UNUSED32,
            UNUSED33,
            UNUSED34,
            UNUSED35,
            UNUSED36,
            UNUSED37,
            UNUSED38,
            UNUSED39,
            UNUSED40,
            UNUSED41,
            UNUSED42,
            UNUSED43,
            UNUSED44,
            UNUSED45,
            UNUSED46,
            UNUSED47,
            UNUSED48,
            PREFIX7,
            PREFIX6,
            PREFIX5,
            PREFIX4,
            PREFIX3,
            PREFIX2,
            PREFIX1,
            PREFIXREF,

            ARGLIST,
            CEQ,
            CGT,
            CGT_UN,
            CLT,
            CLT_UN,
            LDFTN,
            LDVIRTFTN,
            UNUSED56,
            LDARG,
            LDARGA,
            STARG,
            LDLOC,
            LDLOCA,
            STLOC,
            LOCALLOC,
            UNUSED57,
            ENDFILTER,
            UNALIGNED,
            VOLATILE,
            TAILCALL,
            INITOBJ,
            CONSTRAINED,
            CPBLK,
            INITBLK,
            UNUSED69,
            RETHROW,
            UNUSED51,
            SIZEOF,
            REFANYTYPE,
            READONLY,
            UNUSED53,
            UNUSED54,
            UNUSED55,
            UNUSED70,
        };

        struct Opcode
        {
            Opcode(Code code, const std::wstring& name, StackBehaviour stack_behaviour_pop, StackBehaviour stack_behaviour_push, OperandType operand_type,
                OpCodeType opcode_type, u8 length, u8 byte1, u8 byte2, FlowControl flow_control)
                :
                code(code), name(name), stack_behaviour_pop(stack_behaviour_pop), stack_behaviour_push(stack_behaviour_push), operand_type(operand_type),
                opcode_type(opcode_type), length(length), byte1(byte1), byte2(byte2), flow_control(flow_control)
            {}

            Code code;
            std::wstring name;
            StackBehaviour stack_behaviour_pop;
            StackBehaviour stack_behaviour_push;
            OperandType operand_type;
            OpCodeType opcode_type;
            u8 length;
            u8 byte1;
            u8 byte2;
            FlowControl flow_control;

            inline bool operator==(const Opcode& other) {
                return this->byte1 == other.byte1 && this->byte2 == other.byte2;
            }
        };

    }
}
